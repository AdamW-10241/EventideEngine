#version 460 core

layout (location = 0) in vec3 vPosition;
layout (location = 1) in vec3 vColour;
layout (location = 2) in vec2 vTexCoords;
layout (location = 3) in vec3 vNormals;
layout (location = 4) in vec3 vTangents;
layout (location = 5) in vec3 vBitTangents;

uniform mat4 mesh = mat4(1.0f);
uniform mat4 model = mat4(1.0);
uniform mat4 view = mat4(1.0);
uniform mat4 projection = mat4(1.0);

out vec3 fColour;
out vec2 fTexCoords;
out mat3 fTBN;
out vec3 fVertPos;
out vec3 fViewPos;

void main() {
	// Combine the model and mesh to get the correct relative position from the model
	mat4 relPos = model * mesh;

	// gl_Position is the position of the vertex
	// based on screen and then offset
	gl_Position = projection * view * relPos * vec4(vPosition, 1.0);

	// Pass the colour to the frag shader
	fColour = vColour;

	// Pass the texture coordinates to the frag shader
	fTexCoords = vTexCoords;
	
	// Calculate the TBN matrix to allow for texture normals to correctly map
	// Found normal map implementation code from:
	// LearnOpenGL 2024, Normal Mapping, viewed August 9, https://learnopengl.com/Advanced-Lighting/Normal-Mapping

	mat3 normalMatrix = mat3(transpose(inverse(relPos)));
	vec3 normals = normalize(normalMatrix * vNormals);
	vec3 tangents = normalize(normalMatrix * vTangents);
	vec3 bitTangents = normalize(normalMatrix * vBitTangents);
	fTBN = mat3(tangents, bitTangents, normals);

	// Get position of the vertex in world space
	fVertPos = vec3(relPos * vec4(vPosition, 1.0f));

	// Get the view position
	fViewPos = vec3(view * relPos * vec4(vPosition, 1.0f));
}